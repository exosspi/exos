# Un mini-jeu en console

---
__Avant d'attaquer...__

...faîtes l'[exo 2](/?n=C/exo2) __;)__

---

## Notions abordées

mystère.... votre imagination est maîtresse !

## Enoncé

Il s'agit cette fois de créer un minijeu.

Normalement, après l'exo2, vous devriez avoir une base pour l'affichage d'une _"map"_ et le déplacement d'un _'A'_ dedans (le bonhomme).

Maintenant, on va améliorer un peu le tout : débrouillez vous pour réaliser un jeu de labyrinthe.

L'utilisateur déplace le bonhomme comme avant mais à travers un labyrinthe et doit atteindre un _"secret"_ (représenté par un __!__ par exemple).
Quand il l'atteint, affichez un message de victoire et arrêtez le programme.

### Pourquoi ne pas donner plus d'indices

Parce que je pense que vous êtes largement assez futés pour y arriver tout seuls ;)

Souvenez vous aussi que si à la fac on vous aide, dehors, personne n'est là pour vous guider : un problème est un problème et se résout pas avec des astuces mais avec son cerveau.

Comme d'habitude, si le code en lui même vous pose problème, lâchez le clavier et prenez un papier.

Une fois bien préparé, le code ne comporte __aucune__ difficulté ni d'un point de vue algorithmique ni vis à vis de l'implémentation.

## Solution

Voilà [un zip](http://matael.org/~matael/exos/exo2bis.zip) avec une solution.

Compilez avec :

    $ make

Le fichier `compile_map.py` est un script python permettant la génération des instructions pour une map (à grand coup de `set_wall`, cf la solution ;)).
Adaptez le pour vos besoins ou mieux : recodez le !
Le fichier `map.h` contient une unique fonction pour le setup de la map.
Elle a été générée avec un script comme celui ci à partir de `test_map` et de `compile_map.py` :

    #!/bin/bash

    echo "void fill_map(Matrice m) {"
    python compile_map.py test_map
    echo "}"

Lancé via :

    $ script.sh > map.h

Pas sûr que ça vous soit très utile, mais __essayez de faire un utilitaire du genre : c'est un bon entrainement__.

__Il n'y a pour ainsi dire pas de commentaires : peu de fonctions ont changé depuis l'exo 2 et cette solution est donnée pour que vous puissiez la tester et vous rendre compte du résultat attendu ;)__

Là encore, je peux justifier ce choix : __TIMTOWTDI__ 

<p class="center"><strong>There Is More Than One Way To Do It</strong></p>

Ma solution n'est pas la meilleure et pourrait être améliorée : meilleure gestion de la mémoire, utilisation d'une bibliothèque pour gèrer l'affichage (genre _ncurses_), etc...
