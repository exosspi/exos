Il s'agit là de travailler un peu autour de bash.
Bien que souvent délaissé, ce langage permet de faire des choses puissantes et est un véritable atout.

---

__Notions abordées :__ 

- Lecture de fichier
- utilisation de commandes simples `grep`, `cat`, `cut`, `sort`, `wc`, `echo`
- _pipe_
- varaibles imbriquées

---


# Exo 1 : /etc/passwd

# Enoncé

Le fichier `/etc/passwd` sous Linux contient des informations sur les utilisateurs et par conséquent la liste.

Ce fichier ressemble à quelque chose comme ça :

    root:x:0:0:root:/root:/bin/bash
    daemon:x:1:1:daemon:/usr/sbin:/bin/sh
    bin:x:2:2:bin:/bin:/bin/sh
    sys:x:3:3:sys:/dev:/bin/sh
    sync:x:4:65534:sync:/bin:/bin/sync
    games:x:5:60:games:/usr/games:/bin/sh
    man:x:6:12:man:/var/cache/man:/bin/sh
    lp:x:7:7:lp:/var/spool/lpd:/bin/sh
    mail:x:8:8:mail:/var/mail:/bin/sh
    news:x:9:9:news:/var/spool/news:/bin/sh
    uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
    proxy:x:13:13:proxy:/bin:/bin/sh
    www-data:x:33:33:www-data:/var/www:/bin/sh
    backup:x:34:34:backup:/var/backups:/bin/sh
    list:x:38:38:Mailing List Manager:/var/list:/bin/sh
    irc:x:39:39:ircd:/var/run/ircd:/bin/sh
    gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
    nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
    libuuid:x:100:101::/var/lib/libuuid:/bin/sh
    syslog:x:101:103::/home/syslog:/bin/false
    colord:x:102:105:colord colour management daemon,,,:/var/lib/colord:/bin/false
    messagebus:x:103:107::/var/run/dbus:/bin/false
    lightdm:x:104:108:Light Display Manager:/var/lib/lightdm:/bin/false
    avahi-autoipd:x:105:112:Avahi autoip daemon,,,:/var/lib/avahi-autoipd:/bin/false
    avahi:x:106:113:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/bin/false
    usbmux:x:107:46:usbmux daemon,,,:/home/usbmux:/bin/false
    kernoops:x:108:65534:Kernel Oops Tracking Daemon,,,:/:/bin/false
    pulse:x:109:119:PulseAudio daemon,,,:/var/run/pulse:/bin/false
    rtkit:x:110:122:RealtimeKit,,,:/proc:/bin/false
    speech-dispatcher:x:111:29:Speech Dispatcher,,,:/var/run/speech-dispatcher:/bin/sh
    hplip:x:112:7:HPLIP system user,,,:/var/run/hplip:/bin/false
    saned:x:113:123::/home/saned:/bin/false
    mpd:x:114:29::/var/lib/mpd:/bin/false
    sshd:x:115:65534::/var/run/sshd:/usr/sbin/nologin

Monsieur C.G. (n'y voyez aucun rapport avec un membre du gouvernement) voudrait bien récupérer la liste __triée__ des utilisateurs, soit un truc ressemblant à :

    avahi
    avahi-autoipd
    backup
    bin
    colord
    daemon
    games
    gnats
    hplip
    irc
    kernoops
    libuuid
    lightdm
    list
    lp
    mail
    man
    messagebus
    mpd
    news
    nobody
    proxy
    pulse
    root
    rtkit
    saned
    speech-dispatcher
    sshd
    sync
    sys
    syslog
    usbmux
    uucp
    www-data

A vous de jouer !

_PS : ça tient en une ligne, et encore, j'ai enlevé la ligne avec mon nom d'utilisateur ;)_

## Correction

Attention, c'est très con :

    $ cat /etc/passwd | cut -d ':' 'f 1 | sort

__Explication :__


Le symbole `|` (_pipe_) permet de rediriger la sortie standard du programme à sa gauche vers l'entrée standard du programme à sa droite

- `cat` lit le fichier passé en paramètre et l'affiche sur la sortie standard
- `cut` récupère la sortie et la découpe :
    - les champs sont délimités par le caractère `:` (`-d ':'`, `d` pour _delimiter_):

        www-data:x:33:33:www-data:/var/www:/bin/sh

    - seul le premier champ nous intéresse (le _login_) (`-f 1`, `f` pour _field_)
- `sort` porte bien son nom (_trier_ en anglais) et fait bien son boulot

_Le bonus_

Je vous ai dit que j'avais enlevé mon _login_ du fichier avant de le coller ici.
Pour cela, j'ai utilisé la commande `grep` à la place de `cat`.

L'option `-v` de grep permet d'__inverser la selection__ et donc de garder les lignes __qui ne correspondent pas au motif précisé__.
Mon _login_ est _"matael"_ j'ai donc utilisé :


    $ grep -v matael /etc/passwd | cut -d ':' 'f 1 | sort

# Exo 2 : Comptez vous !

## Enoncé

Maintenant, la liste ne suffit plus à M. CG.
Il en veut toujours plus !

Il veut que celle-ci soit __précédée__ de la phrase

> Il y a _n_ personnes fichées :

Où _n_ est bien sûr le nombre de personnes.

__Note :__ l'utilisation de `$(commandes...)` permet de considérer toutes les `commandes...` comme une seule et unique donnée.

## Correction

C'est un peut plus velu :

	truc=$(cat /etc/passwd | cut -d ':' -f 1 | sort); echo "Il y a $(echo $truc | wc -l) personnes fichées :"; echo $truc

Détaillons.

Il y a 3 instructions (on aurait pu en mettre que 2 en fusionnant les deux dernières) :
- une affectation `truc=$(cat /etc/passwd | cut -d ':' -f 1 | sort)`
- deux affichage (avec `echo`).

Vous noterez que les instructions sont séparées par des points-virgules (`;`).

On aurait pu écrire ça sous la forme d'un script :

	#!/bin/bash
	
	truc=$(cat /etc/passwd | cut -d ':' -f 1 | sort)
	echo "Il y a $(echo $truc | wc -l) personnes fichées :"
	echo $truc

Notez là aussi que :

- la première ligne est bizarre. Elle s'appelle le _shebang_ et permet de spécifier le programme d'exécution (ici `/bin/bash`).
- les points-virgules sont facultatifs si les instructions sont sur des lignes différentes


__Explication :__

- la ligne commençant par truc (première partie de la commande, avant le premier `;`) est une affectation. On affecte à la variable `truc` le retour de la commande `cat /etc/passwd | cut -d ':' -f 1 | sort` (celle de l'exo 1 ;) ).
  
  `$truc` contient donc une liste triée de _logins_ sous forme de chaine de caractère, 1 _login_ par ligne.

  Remarquez enfin que lors de sa création, le nom de variable n'est pas précédé de `$` alors qu'il l'est ensuite. C'est une règle de syntaxe en bash.

- le premier `echo...` renvoie la ligne demandée dans l'énoncé.
  La chaine de caractère à afficher est entourée de `"` (_double-quotes_), on met des _double-quotes_ pour que les expressions contenues soient évaluées (noms de variable remplacés par leur valeur, etc...).
 
  Ici on s'en sert pour compter les logins (donc les lignes dans notre cas).
  La commande `wc` (pour _word count_) et son option `-l` (pour _line_) conviennent parfaitement.
  
  On fait donc un `echo` sur le contenu de `$truc` puis au lieu d'afficher, on compte le nombre de lignes, nombre qui sera ajouté dans la chaine grâce aux _double-quotes_ et au `$(...)` qui permet d'evaluer le contenu comme un tout.
- le dernier echo est bête et méchant : il ne fait qu'afficher le contenu de `$truc`, soit la liste des logins ;)

On a donc le magnifique affichage :

	Il y a 34 personnes fichées :
	avahi
	avahi-autoipd
	backup
	bin
	colord
	daemon
	games
	gnats
	hplip
	irc
	kernoops
	libuuid
	lightdm
	list
	lp
	mail
	man
	messagebus
	mpd
	news
	nobody
	proxy
	pulse
	root
	rtkit
	saned
	speech-dispatcher
	sshd
	sync
	sys
	syslog
	usbmux
	uucp
	www-data

